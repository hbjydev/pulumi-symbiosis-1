// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package symbiosis

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages team membership and invitations.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-symbiosis/sdk/go/symbiosis"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := symbiosis.NewTeamMember(ctx, "example", &symbiosis.TeamMemberArgs{
//				Email: pulumi.String("my-user@email.com"),
//				Role:  pulumi.String("MEMBER"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type TeamMember struct {
	pulumi.CustomResourceState

	// Whether the user has accepted the invitation to the team.
	AcceptedInvitation pulumi.StringOutput `pulumi:"acceptedInvitation"`
	// User email to invite. Adding an team member will send the user an invitation. Deleting a team member will either delete the invitation or the user depending on whether the user has accepted the invitation.
	Email pulumi.StringOutput `pulumi:"email"`
	// User role. Valid values include [MEMBER, ADMIN].
	Role pulumi.StringOutput `pulumi:"role"`
}

// NewTeamMember registers a new resource with the given unique name, arguments, and options.
func NewTeamMember(ctx *pulumi.Context,
	name string, args *TeamMemberArgs, opts ...pulumi.ResourceOption) (*TeamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Email == nil {
		return nil, errors.New("invalid value for required argument 'Email'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	var resource TeamMember
	err := ctx.RegisterResource("symbiosis:index/teamMember:TeamMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTeamMember gets an existing TeamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTeamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TeamMemberState, opts ...pulumi.ResourceOption) (*TeamMember, error) {
	var resource TeamMember
	err := ctx.ReadResource("symbiosis:index/teamMember:TeamMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TeamMember resources.
type teamMemberState struct {
	// Whether the user has accepted the invitation to the team.
	AcceptedInvitation *string `pulumi:"acceptedInvitation"`
	// User email to invite. Adding an team member will send the user an invitation. Deleting a team member will either delete the invitation or the user depending on whether the user has accepted the invitation.
	Email *string `pulumi:"email"`
	// User role. Valid values include [MEMBER, ADMIN].
	Role *string `pulumi:"role"`
}

type TeamMemberState struct {
	// Whether the user has accepted the invitation to the team.
	AcceptedInvitation pulumi.StringPtrInput
	// User email to invite. Adding an team member will send the user an invitation. Deleting a team member will either delete the invitation or the user depending on whether the user has accepted the invitation.
	Email pulumi.StringPtrInput
	// User role. Valid values include [MEMBER, ADMIN].
	Role pulumi.StringPtrInput
}

func (TeamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*teamMemberState)(nil)).Elem()
}

type teamMemberArgs struct {
	// User email to invite. Adding an team member will send the user an invitation. Deleting a team member will either delete the invitation or the user depending on whether the user has accepted the invitation.
	Email string `pulumi:"email"`
	// User role. Valid values include [MEMBER, ADMIN].
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a TeamMember resource.
type TeamMemberArgs struct {
	// User email to invite. Adding an team member will send the user an invitation. Deleting a team member will either delete the invitation or the user depending on whether the user has accepted the invitation.
	Email pulumi.StringInput
	// User role. Valid values include [MEMBER, ADMIN].
	Role pulumi.StringInput
}

func (TeamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*teamMemberArgs)(nil)).Elem()
}

type TeamMemberInput interface {
	pulumi.Input

	ToTeamMemberOutput() TeamMemberOutput
	ToTeamMemberOutputWithContext(ctx context.Context) TeamMemberOutput
}

func (*TeamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**TeamMember)(nil)).Elem()
}

func (i *TeamMember) ToTeamMemberOutput() TeamMemberOutput {
	return i.ToTeamMemberOutputWithContext(context.Background())
}

func (i *TeamMember) ToTeamMemberOutputWithContext(ctx context.Context) TeamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamMemberOutput)
}

// TeamMemberArrayInput is an input type that accepts TeamMemberArray and TeamMemberArrayOutput values.
// You can construct a concrete instance of `TeamMemberArrayInput` via:
//
//	TeamMemberArray{ TeamMemberArgs{...} }
type TeamMemberArrayInput interface {
	pulumi.Input

	ToTeamMemberArrayOutput() TeamMemberArrayOutput
	ToTeamMemberArrayOutputWithContext(context.Context) TeamMemberArrayOutput
}

type TeamMemberArray []TeamMemberInput

func (TeamMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TeamMember)(nil)).Elem()
}

func (i TeamMemberArray) ToTeamMemberArrayOutput() TeamMemberArrayOutput {
	return i.ToTeamMemberArrayOutputWithContext(context.Background())
}

func (i TeamMemberArray) ToTeamMemberArrayOutputWithContext(ctx context.Context) TeamMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamMemberArrayOutput)
}

// TeamMemberMapInput is an input type that accepts TeamMemberMap and TeamMemberMapOutput values.
// You can construct a concrete instance of `TeamMemberMapInput` via:
//
//	TeamMemberMap{ "key": TeamMemberArgs{...} }
type TeamMemberMapInput interface {
	pulumi.Input

	ToTeamMemberMapOutput() TeamMemberMapOutput
	ToTeamMemberMapOutputWithContext(context.Context) TeamMemberMapOutput
}

type TeamMemberMap map[string]TeamMemberInput

func (TeamMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TeamMember)(nil)).Elem()
}

func (i TeamMemberMap) ToTeamMemberMapOutput() TeamMemberMapOutput {
	return i.ToTeamMemberMapOutputWithContext(context.Background())
}

func (i TeamMemberMap) ToTeamMemberMapOutputWithContext(ctx context.Context) TeamMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamMemberMapOutput)
}

type TeamMemberOutput struct{ *pulumi.OutputState }

func (TeamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TeamMember)(nil)).Elem()
}

func (o TeamMemberOutput) ToTeamMemberOutput() TeamMemberOutput {
	return o
}

func (o TeamMemberOutput) ToTeamMemberOutputWithContext(ctx context.Context) TeamMemberOutput {
	return o
}

// Whether the user has accepted the invitation to the team.
func (o TeamMemberOutput) AcceptedInvitation() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamMember) pulumi.StringOutput { return v.AcceptedInvitation }).(pulumi.StringOutput)
}

// User email to invite. Adding an team member will send the user an invitation. Deleting a team member will either delete the invitation or the user depending on whether the user has accepted the invitation.
func (o TeamMemberOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamMember) pulumi.StringOutput { return v.Email }).(pulumi.StringOutput)
}

// User role. Valid values include [MEMBER, ADMIN].
func (o TeamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type TeamMemberArrayOutput struct{ *pulumi.OutputState }

func (TeamMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TeamMember)(nil)).Elem()
}

func (o TeamMemberArrayOutput) ToTeamMemberArrayOutput() TeamMemberArrayOutput {
	return o
}

func (o TeamMemberArrayOutput) ToTeamMemberArrayOutputWithContext(ctx context.Context) TeamMemberArrayOutput {
	return o
}

func (o TeamMemberArrayOutput) Index(i pulumi.IntInput) TeamMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TeamMember {
		return vs[0].([]*TeamMember)[vs[1].(int)]
	}).(TeamMemberOutput)
}

type TeamMemberMapOutput struct{ *pulumi.OutputState }

func (TeamMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TeamMember)(nil)).Elem()
}

func (o TeamMemberMapOutput) ToTeamMemberMapOutput() TeamMemberMapOutput {
	return o
}

func (o TeamMemberMapOutput) ToTeamMemberMapOutputWithContext(ctx context.Context) TeamMemberMapOutput {
	return o
}

func (o TeamMemberMapOutput) MapIndex(k pulumi.StringInput) TeamMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TeamMember {
		return vs[0].(map[string]*TeamMember)[vs[1].(string)]
	}).(TeamMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TeamMemberInput)(nil)).Elem(), &TeamMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamMemberArrayInput)(nil)).Elem(), TeamMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamMemberMapInput)(nil)).Elem(), TeamMemberMap{})
	pulumi.RegisterOutputType(TeamMemberOutput{})
	pulumi.RegisterOutputType(TeamMemberArrayOutput{})
	pulumi.RegisterOutputType(TeamMemberMapOutput{})
}
