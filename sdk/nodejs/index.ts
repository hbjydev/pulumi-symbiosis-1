// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ClusterArgs, ClusterState } from "./cluster";
export type Cluster = import("./cluster").Cluster;
export const Cluster: typeof import("./cluster").Cluster = null as any;
utilities.lazyLoad(exports, ["Cluster"], () => require("./cluster"));

export { ClusterServiceAccountArgs, ClusterServiceAccountState } from "./clusterServiceAccount";
export type ClusterServiceAccount = import("./clusterServiceAccount").ClusterServiceAccount;
export const ClusterServiceAccount: typeof import("./clusterServiceAccount").ClusterServiceAccount = null as any;
utilities.lazyLoad(exports, ["ClusterServiceAccount"], () => require("./clusterServiceAccount"));

export { NodePoolArgs, NodePoolState } from "./nodePool";
export type NodePool = import("./nodePool").NodePool;
export const NodePool: typeof import("./nodePool").NodePool = null as any;
utilities.lazyLoad(exports, ["NodePool"], () => require("./nodePool"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { TeamMemberArgs, TeamMemberState } from "./teamMember";
export type TeamMember = import("./teamMember").TeamMember;
export const TeamMember: typeof import("./teamMember").TeamMember = null as any;
utilities.lazyLoad(exports, ["TeamMember"], () => require("./teamMember"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "symbiosis:index/cluster:Cluster":
                return new Cluster(name, <any>undefined, { urn })
            case "symbiosis:index/clusterServiceAccount:ClusterServiceAccount":
                return new ClusterServiceAccount(name, <any>undefined, { urn })
            case "symbiosis:index/nodePool:NodePool":
                return new NodePool(name, <any>undefined, { urn })
            case "symbiosis:index/teamMember:TeamMember":
                return new TeamMember(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("symbiosis", "index/cluster", _module)
pulumi.runtime.registerResourceModule("symbiosis", "index/clusterServiceAccount", _module)
pulumi.runtime.registerResourceModule("symbiosis", "index/nodePool", _module)
pulumi.runtime.registerResourceModule("symbiosis", "index/teamMember", _module)
pulumi.runtime.registerResourcePackage("symbiosis", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:symbiosis") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
